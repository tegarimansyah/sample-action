name: "Reuse steps for using poetry and the cache"

inputs:
  python-version:
    description: Python Version
    required: true
  poetry-version:
    description: Poetry Version
    required: true

runs:
  using: "composite"
  steps:
    #----------------------------------------------
    #       check-out repo and set-up python
    #----------------------------------------------
    - name: Set up python ${{ inputs.python-version }}
      id: setup-python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}
    #----------------------------------------------
    #  -----  install & configure poetry  -----
    #----------------------------------------------
    # TODO add cache for installing poetry, since it's also took +- 10s to download
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ inputs.poetry-version }}
        virtualenvs-create: true
        virtualenvs-in-project: true
    #----------------------------------------------
    #       load cached venv if cache exists
    #----------------------------------------------
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
        # Restore cache with this prefix if not exact match with key
        # Note cache-hit returns false in this case, so the below step will run
        restore-keys: |
          venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-
    #----------------------------------------------
    # install dependencies if cache does not exist
    #----------------------------------------------
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      shell: bash
      run: poetry install --no-interaction --no-root
